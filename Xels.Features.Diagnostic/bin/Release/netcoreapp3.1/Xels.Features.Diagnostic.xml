<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xels.Features.Diagnostic</name>
    </assembly>
    <members>
        <member name="T:Xels.Features.Diagnostic.Controllers.DiagnosticController">
            <summary>
            Controller providing diagnostic operations on fullnode.
            </summary>
        </member>
        <member name="M:Xels.Features.Diagnostic.Controllers.DiagnosticController.#ctor(Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector,Xels.Bitcoin.Connection.IConnectionManager,Xels.Bitcoin.Consensus.IConsensusManager)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="peerStatisticsCollector">See <see cref="T:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector"/>.</param>
            <param name="connectionManager">See <see cref="T:Xels.Bitcoin.Connection.IConnectionManager"/>.</param>
            <param name="consensusManager">See <see cref="T:Xels.Bitcoin.Consensus.IConsensusManager"/>.</param>
        </member>
        <member name="M:Xels.Features.Diagnostic.Controllers.DiagnosticController.GetConnectedPeersInfo">
            <summary>
            Returns the connected peers with some information.
            </summary>
            <returns>The connected peers with some information.</returns>
            <response code="200">Returns connected peers information</response>
            <response code="400">Unexpected exception occurred</response>
        </member>
        <member name="M:Xels.Features.Diagnostic.Controllers.DiagnosticController.GetStatus">
            <summary>
            Gets the Diagnostic Feature status.
            </summary>
            <returns>The Diagnostic Feature status</returns>
            <response code="200">Returns the status</response>
            <response code="400">Unexpected exception occurred</response>
        </member>
        <member name="M:Xels.Features.Diagnostic.Controllers.DiagnosticController.GetPeerStatistics(System.Boolean)">
            <summary>
            Returns the connected peers with some statistical information.
            </summary>
            <param name="connectedOnly">if set to <c>true</c> returns statistics related to connected peers only.</param>
            <returns>List of peer statistics</returns>
            <response code="200">Returns connected peers statistics</response>
            <response code="400">Unexpected exception occurred</response>
        </member>
        <member name="M:Xels.Features.Diagnostic.Controllers.DiagnosticController.StartCollectingPeerStatistics">
            <summary>
            Starts collecting peers statistics.
            </summary>
            <returns>Operation result.</returns>
            <response code="200">Peer statistics collection started</response>
            <response code="400">Unexpected exception occurred</response>
        </member>
        <member name="M:Xels.Features.Diagnostic.Controllers.DiagnosticController.StopCollectingPeerStatistics">
            <summary>
            Stops collecting peers statistics.
            Stopping a running peer statistic collecotr doesn't clear obtained results.
            </summary>
            <returns>Operation result.</returns>
            <response code="200">Peer statistics collection stopped</response>
            <response code="400">Unexpected exception occurred</response>
        </member>
        <member name="T:Xels.Features.Diagnostic.Controllers.Models.PeerStatisticsModel">
            <summary>
            Records perr statistics.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.Controllers.Models.PeerStatisticsModel.PeerEndPoint">
            <summary>
            The peer endpoint.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.Controllers.Models.PeerStatisticsModel.Connected">
            <summary>
            Indicates whether the peer is connected.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.Controllers.Models.PeerStatisticsModel.Inbound">
            <summary>
            Indicates whether this is an inbound peer.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.Controllers.Models.PeerStatisticsModel.BytesSent">
            <summary>
            The number of bytes sent to the peer.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.Controllers.Models.PeerStatisticsModel.BytesReceived">
            <summary>
            The number of bytes received from the peer.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.Controllers.Models.PeerStatisticsModel.ReceivedMessages">
            <summary>
            The number of messages received from the peer.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.Controllers.Models.PeerStatisticsModel.SentMessages">
            <summary>
            The number of messages sent to the peer.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.Controllers.Models.PeerStatisticsModel.LatestEvents">
            <summary>
            The list of latest events.
            </summary>
        </member>
        <member name="M:Xels.Features.Diagnostic.Controllers.Models.PeerStatisticsModel.#ctor(Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics,System.Boolean)">
            <summary>
            Class instance constructor.
            </summary>
            <param name="peer">See <see cref="T:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics"/>.</param>
            <param name="connected">Indicates whether the peer is connected.</param>
        </member>
        <member name="T:Xels.Features.Diagnostic.DiagnosticFeature">
            <summary>
            Feature for diagnostic purpose that allow to have insights about internal details of the fullnode while it's running.
            <para>In order to collect internal details, this feature makes use of Signals to register to internal events published
            by the full node and uses reflection whenever it needs to access information not meant to be publicly exposed.</para>
            <para>It exposes <see cref="T:Xels.Features.Diagnostic.Controllers.DiagnosticController"/>, an API controller that allow to query for information using the API feature, when available.</para>
            </summary>
            <seealso cref="T:Xels.Bitcoin.Builder.Feature.FullNodeFeature" />
        </member>
        <member name="M:Xels.Features.Diagnostic.DiagnosticFeature.#ctor(Xels.Bitcoin.Signals.ISignals,Xels.Features.Diagnostic.DiagnosticSettings,Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector)">
            <summary>
            The class instance constructor.
            </summary>
            <param name="signals">See <see cref="T:Xels.Bitcoin.Signals.ISignals"/>.</param>
            <param name="diagnosticSettings">See <see cref="T:Xels.Features.Diagnostic.DiagnosticSettings"/>.</param>
            <param name="peerStatisticsCollector">See <see cref="T:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector"/>.</param>
        </member>
        <member name="M:Xels.Features.Diagnostic.DiagnosticFeature.InitializeAsync">
            <summary>
            Initializes the instance.
            </summary>
            <returns>The asynchronous task.</returns>
        </member>
        <member name="M:Xels.Features.Diagnostic.DiagnosticFeature.PrintHelp(NBitcoin.Network)">
            <summary>
            Prints command-line help.
            </summary>
            <param name="network">The network to extract values from.</param>
        </member>
        <member name="M:Xels.Features.Diagnostic.DiagnosticFeature.Dispose">
            <summary>
            Disposes the instance.
            </summary>
        </member>
        <member name="T:Xels.Features.Diagnostic.DiagnosticFeatureExtension">
            <summary>
            Extension for adding the feature to the node.
            </summary>
        </member>
        <member name="M:Xels.Features.Diagnostic.DiagnosticFeatureExtension.UseDiagnosticFeature(Xels.Bitcoin.Builder.IFullNodeBuilder)">
            <summary>
            Adds the feature to the node.
            </summary>
            <param name="fullNodeBuilder">See <see cref="T:Xels.Bitcoin.Builder.IFullNodeBuilder"/>.</param>
            <returns>The <see cref="T:Xels.Bitcoin.Builder.IFullNodeBuilder"/>.</returns>
        </member>
        <member name="T:Xels.Features.Diagnostic.DiagnosticSettings">
            <summary>
            Configuration related to the API interface.
            </summary>
        </member>
        <member name="F:Xels.Features.Diagnostic.DiagnosticSettings.DefaultPeersStatisticsCollectorEnabled">
            <summary>The default value for peers statistics collector.</summary>
        </member>
        <member name="F:Xels.Features.Diagnostic.DiagnosticSettings.DefaultMaxPeerLoggedEvents">
            <summary>The default value for maximum peers logged events.</summary>
        </member>
        <member name="F:Xels.Features.Diagnostic.DiagnosticSettings.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.DiagnosticSettings.PeersStatisticsCollectorEnabled">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector"/> starts enabled.
            </summary>
            <value>
              <c>true</c> if <see cref="T:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector"/> starts enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Xels.Features.Diagnostic.DiagnosticSettings.MaxPeerLoggedEvents">
            <summary>
            Gets or sets the maximum peer logged events in <see cref="T:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector"/>.
            </summary>
            <value>
            The maximum peer logged events.
            </value>
        </member>
        <member name="M:Xels.Features.Diagnostic.DiagnosticSettings.#ctor(Xels.Bitcoin.Configuration.NodeSettings)">
            <summary>
            Initializes an instance of the object from the node configuration.
            </summary>
            <param name="nodeSettings">The node configuration.</param>
        </member>
        <member name="M:Xels.Features.Diagnostic.DiagnosticSettings.PrintHelp(NBitcoin.Network)">
            <summary>Prints the help information on how to configure the Diagnostic Feature to the logger.</summary>
            <param name="network">The network to use.</param>
        </member>
        <member name="T:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics">
            <summary>
            Holds peer statistics.
            <see cref="P:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics.LatestEvents"/> is a limited size string representation of latest peer events, its maximum size is specified in the class constructor maxLoggedEvents
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics.PeerEndPoint">
            <summary>
            The peer endpoint.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics.Inbound">
            <summary>
            Indicates whether this is an inbound peer.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics.BytesSent">
            <summary>
            The number of bytes sent to the peer.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics.BytesReceived">
            <summary>
            The number of bytes received from the peer.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics.ReceivedMessages">
            <summary>
            The number of messages received from the peer.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics.SentMessages">
            <summary>
            The number of messages sent to the peer.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics.LatestEvents">
            <summary>
            Gets or sets the latest events.
            </summary>
            <value>
            The latest events.
            </value>
        </member>
        <member name="M:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics.#ctor(System.Int32,System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics" /> class.
            </summary>
            <param name="maxLoggedEvents">The maximum number of logged events.</param>
            <param name="peerEndPoint">The peer end point.</param>
        </member>
        <member name="M:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics.LogEvent(System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="loggedText">The text to log.</param>
        </member>
        <member name="T:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector">
            <summary>
            Subscribe to peer events and keep track of their activities.
            A summary of peer activities can be obtained using <see cref="T:Xels.Features.Diagnostic.Controllers.DiagnosticController"/> actions
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector.Enabled">
            <summary>Track current collecting status, when true Peer Collector is collecting statistics.</summary>
        </member>
        <member name="F:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector.peersEventsQueue">
            <summary>Non blocking queue that consume received peer events to generate peer statistics.</summary>
        </member>
        <member name="F:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector.eventSubscriptions">
            <summary>Holds a list of event subscriptions.</summary>
        </member>
        <member name="M:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector.#ctor(Xels.Bitcoin.AsyncWork.IAsyncProvider,Xels.Bitcoin.Signals.ISignals,Xels.Features.Diagnostic.DiagnosticSettings,Xels.Bitcoin.Utilities.INodeLifetime)">
            <summary>
            Class instance constructor.
            </summary>
            <param name="asyncProvider">See <see cref="T:Xels.Bitcoin.AsyncWork.IAsyncProvider"/>.</param>
            <param name="signals">See <see cref="T:Xels.Bitcoin.Signals.ISignals"/>.</param>
            <param name="diagnosticSettings">See <see cref="T:Xels.Features.Diagnostic.DiagnosticSettings"/>.</param>
            <param name="nodeLifetime">See <see cref="T:Xels.Bitcoin.Utilities.INodeLifetime"/>.</param>
        </member>
        <member name="M:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector.Initialize">
            <summary>
            Initializes a class instance.
            </summary>
        </member>
        <member name="M:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector.StartCollecting">
            <summary>
            Starts collecting peer statistics.
            </summary>
        </member>
        <member name="M:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector.StopCollecting">
            <summary>
            Stops collecting peer statistics.
            </summary>
        </member>
        <member name="M:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector.GetStatistics">
            <summary>
            Gets peer statistics.
            </summary>
            <returns>A list of <see cref="T:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatistics"/> entries.</returns>
        </member>
        <member name="M:Xels.Features.Diagnostic.PeerDiagnostic.PeerStatisticsCollector.Dispose">
            <summary>
            Disposes a class instance.
            </summary>
        </member>
        <member name="T:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1">
            <summary>
            Non locking Concurrent Fixed Size Queue.
            This implementation is a lose fixed size queue, because it may sometime exceed the number of items because it wraps a ConcurrentQueue and
            that is a lock-free concurrent queue implementation, so even if there is a chance it may exceed maxSize, it serves the purpose of circular buffer
            to hold a limited set of updated elements.
            </summary>
            <typeparam name="T">The type of collection items.</typeparam>
            <seealso cref="T:System.Collections.Generic.IReadOnlyCollection`1" />
            <seealso cref="T:System.Collections.ICollection" />
        </member>
        <member name="P:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.Count">
            <summary>
            Number of items in the queue.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.IsEmpty">
            <summary>
            Indicates whether the queue is empty.
            </summary>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.#ctor(System.Int32)">
            <summary>
            Class instance constructor.
            </summary>
            <param name="maxSize">Initial maximum size.</param>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Class instance constructor.
            </summary>
            <param name="initialCollection">The intial collection.</param>
            <param name="maxSize">Initial maximum size.</param>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.Enqueue(`0)">
            <summary>
            Adds an item to the queue.
            </summary>
            <param name="item">The item to add to the queue.</param>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.TryPeek(`0@)">
            <summary>
            Tries to return an object from the begginning of the queue without removing it.
            </summary>
            <param name="result">The object from the beginning of the queue (if any).</param>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.TryDequeue(`0@)">
            <summary>
            Tries to remove an object from the beginning of the queue (if any).
            </summary>
            <param name="result">The object from the beginning of the queue (if any).</param>
            <returns><c>True</c> if an element was removed and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the queue elements to an array starting at the given index.
            </summary>
            <param name="array">The array to copy the elements to.</param>
            <param name="index">The index in the array to start copying to.</param>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.ToArray">
            <summary>
            Converts the queue elements to an array.
            </summary>
            <returns>The array containing the queue elements.</returns>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.GetEnumerator">
            <summary>
            Gets an enumerator for iterating the queue elements.
            </summary>
            <returns>The enumerator for iterating the queue elements.</returns>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating the queue elements.
            </summary>
            <returns>The enumerator for iterating the queue elements.</returns>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the queue elements to an array starting at the given index.
            </summary>
            <param name="array">The array to copy the elements to.</param>
            <param name="index">The index in the array to start copying to.</param>
        </member>
        <member name="P:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.Equals(System.Object)">
            <summary>
            Determines if the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified object.</param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ConcurrentFixedSizeQueue`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xels.Features.Diagnostic.Utils.ReflectionExtension">
            <summary>
            Provides an extension with methods to access private properties.
            </summary>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ReflectionExtension.GetPrivatePropertyValue``1(System.Object,System.String)">
            <summary>
            Gets the private property value.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">The object.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ReflectionExtension.SetPrivatePropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Sets a private property value for a given object.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is set</param>
            <param name="propertyName">Property name as string.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Xels.Features.Diagnostic.Utils.ReflectionExtension.GetPrivateFieldValue``1(System.Object,System.String)">
            <summary>
            Using reflection, retrieves the value of private field with this name on the supplied object. If no field is found, returns null.
            </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is set</param>
            <param name="fieldName">Name of the field.</param>
            <returns>The field value</returns>
        </member>
    </members>
</doc>
