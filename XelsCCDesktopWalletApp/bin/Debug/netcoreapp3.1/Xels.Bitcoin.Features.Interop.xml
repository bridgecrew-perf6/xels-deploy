<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xels.Bitcoin.Features.Interop</name>
    </assembly>
    <members>
        <member name="M:Xels.Bitcoin.Features.Interop.Controllers.InteropController.OwnersAsync(Xels.Bitcoin.Features.Wallet.DestinationChain)">
            <summary>
            Retrieves the list of current owners for the multisig wallet contract.
            </summary>
            <param name="destinationChain">The chain the multisig wallet contract is deployed to.</param>
            <returns>The list of owner accounts for the multisig wallet contract.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Controllers.InteropController.AddOwnerAsync(Xels.Bitcoin.Features.Wallet.DestinationChain,System.String,System.Int32)">
            <summary>
            Creates and broadcasts an 'addOwner()' contract call on the multisig wallet contract.
            This can only be done by one of the current owners of the contract, and needs to be confirmed by a sufficient number of the other owners.
            </summary>
            <param name="destinationChain">The chain the multisig wallet contract is deployed to.</param>
            <param name="newOwnerAddress">The account of the new owner to be added.</param>
            <param name="gasPrice">The gas price to use for transaction submission.</param>
            <returns>The transactionId of the multisig wallet contract transaction, which is then used to confirm the transaction.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Controllers.InteropController.RemoveOwnerAsync(Xels.Bitcoin.Features.Wallet.DestinationChain,System.String,System.Int32)">
            <summary>
            Creates and broadcasts a 'removeOwner()' contract call on the multisig wallet contract.
            This can only be done by one of the current owners of the contract, and needs to be confirmed by a sufficient number of the other owners.
            </summary>
            <param name="destinationChain">The chain the multisig wallet contract is deployed to.</param>
            <param name="existingOwnerAddress">The account of the owner to be removed.</param>
            <param name="gasPrice">The gas price to use for transaction submission.</param>
            <returns>The transactionId of the multisig wallet contract transaction, which is then used to confirm the transaction.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Controllers.InteropController.ConfirmTransactionAsync(Xels.Bitcoin.Features.Wallet.DestinationChain,System.Int32,System.Int32)">
            <summary>
            Explicitly confirms a given multisig wallet contract transactionId by submitting a contract call transaction to the network.
            <remarks>This can only be called once per multisig owner. Additional calls by the same owner account will simply fail and waste gas.</remarks>
            </summary>
            <param name="destinationChain">The chain the multisig wallet contract is deployed to.</param>
            <param name="transactionId">The multisig wallet transactionId (this is an integer, not an on-chain transaction hash).</param>
            <param name="gasPrice">The gas price to use for submitting the confirmation.</param>
            <returns>The on-chain transaction hash of the contract call transaction.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Controllers.InteropController.ChangeRequirementAsync(Xels.Bitcoin.Features.Wallet.DestinationChain,System.Int32,System.Int32)">
            <summary>
            Creates and broadcasts a 'changeRequirement()' contract call on the multisig wallet contract.
            This can only be done by one of the current owners of the contract, and needs to be confirmed by a sufficient number of the other owners.
            <remarks>This should only be done once all owner modifications are complete to save gas and orchestrating confirmations.</remarks>
            </summary>
            <param name="destinationChain">The chain the multisig wallet contract is deployed to.</param>
            <param name="requirement">The new threshold for confirmations on the multisig wallet contract. Can usually be numOwners / 2 rounded up.</param>
            <param name="gasPrice">The gas price to use for submitting the contract call transaction.</param>
            <returns>The multisig wallet transactionId of the changerequirement call.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Controllers.InteropController.MultisigTransactionAsync(Xels.Bitcoin.Features.Wallet.DestinationChain,System.Int32,System.Boolean)">
            <summary>
            Retrieves a multisig wallet transaction.
            </summary>
            <param name="destinationChain">The chain the multisig wallet contract is deployed to.</param>
            <param name="transactionId">The multisig wallet transactionId (this is an integer, not an on-chain transaction hash).</param>
            <param name="raw">Indicates whether to partially decode the transaction or leave it in raw hex format.</param>
            <returns>The multisig wallet transaction data.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Controllers.InteropController.MultisigConfirmationsAsync(Xels.Bitcoin.Features.Wallet.DestinationChain,System.Int32)">
            <summary>
            Returns the list of contract owners that confirmed a particular multisig transaction.
            </summary>
            <param name="destinationChain">The chain the multisig wallet contract is deployed to.</param>
            <param name="transactionId">The multisig wallet transactionId (this is an integer, not an on-chain transaction hash).</param>
            <returns>A list of owner addresses that confirmed the transaction.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Controllers.InteropController.BalanceAsync(Xels.Bitcoin.Features.Wallet.DestinationChain,System.String)">
            <summary>
            Retrieves the wSTRAX balance of a given account.
            </summary>
            <param name="destinationChain">The chain the wSTRAX ERC20 contract is deployed to.</param>
            <param name="account">The account to retrieve the balance for.</param>
            <returns>The account balance.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Controllers.InteropController.SetOriginatorForRequest(System.String)">
            <summary>
            Endpoint that allows the multisig operator to set itself as the originator (submittor) for a given request id.
            </summary>
            <param name="requestId">The request id in question.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Controllers.InteropController.ResetConversionRequestAsNotOriginator(System.String)">
            <summary>
            Endpoint that allows the multisig operator to reset the request as NotOriginator.
            </summary>
            <param name="requestId">The request id in question.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Controllers.InteropController.ReprocessBurnRequest(Xels.Bitcoin.Features.Interop.Models.ReprocessBurnRequestModel)">
            <summary>
            Endpoint that allows the multisig operator to reset the request as NotOriginator.
            </summary>
            <param name="model">The request id and height at which to reprocess the burn request at.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Controllers.InteropController.PushVoteManually(Xels.Bitcoin.Features.Interop.Models.PushManualVoteForRequest)">
            <summary>
            Endpoint that allows the multisig operator to manually add a vote if they are originator of the request.
            </summary>
            <param name="model">The request id and vote in question.</param>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.CreateTransferEventFilterAsync">
            <summary>
            Creates the filter that the RPC interface uses to listen for events against the desired contract.
            In this case the filter is specifically listening for Transfer events emitted by the wrapped strax
            contract.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.GetTransferEventsForWrappedStraxAsync">
            <summary>
            Queries the previously created event filter for any new events matching the filter criteria.
            </summary>
            <returns>A list of event logs.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.GetDestinationAddressAsync(System.String)">
            <summary>
            Retrieves the STRAX address that was recorded in the wrapped STRAX contract when a given account
            burnt funds. The destination address must have been provided as a parameter to the burn() method
            invocation and only one address at a time can be associated with each account.
            </summary>
            <param name="address">The Ethereum account to retrieve the destination STRAX address for.</param>
            <returns>The STRAX address associated with the provided Ethereum account.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.GetBlockHeightAsync">
            <summary>
            Retrieves the current block height of the Ethereum node.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.GetBalanceAsync(System.String)">
            <summary>
            Retrieves the balance for an Ethereum account.
            </summary>
            <param name="address">The Ethereum account to retrieve the destination balance for.</param>
            <returns>The balance of the account in wei.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.SubmitTransactionAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32)">
            <summary>
            Submits a transaction to the multisig wallet contract, to enable it to be separately confirmed by a quorum of the multisig wallet owners.
            </summary>
            <param name="destination">The account that the transaction is being sent to after confirmation. For wSTRAX operations this will typically be the wSTRAX ERC20 contract address.</param>
            <param name="value">The amount that is being sent. For wSTRAX operations this is typically zero, as the balance changes are encoded within the additional data.</param>
            <param name="data">Additional transaction data. This is encoded in accordance with the applicable contract's ABI.</param>
            <param name="gasPrice">The gas price to be used for the transaction, in gwei.</param>
            <returns>Returns the hash and transactionId of the submission transaction.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.ConfirmTransactionAsync(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Confirms a multisig wallet transaction.
            </summary>
            <remarks>Once a sufficient threshold of confirmations is reached, the contract will automatically execute the saved transaction.</remarks>
            <param name="transactionId">The transactionId of an existing transaction stored in the multisig wallet contract.</param>
            <param name="gasPrice">The gas price to be used for the transaction, in gwei.</param>
            <returns>The hash of the confirmation transaction.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.GetMultisigConfirmationCountAsync(System.Numerics.BigInteger)">
            <summary>
            Retrieve the number of confirmations a given transaction currently has in the multisig wallet contract.
            </summary>
            <param name="transactionId">The numeric identifier of the transaction stored inside the multisig contract.</param>
            <returns>The number of confirmations.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.GetOwnersAsync">
            <summary>
            Gets the list of owners for the multisig wallet contract.
            </summary>
            <returns>The list of owner accounts.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.AddressConfirmedTransactionAsync(System.Numerics.BigInteger,System.String)">
            <summary>
            Checks if the given address confirmed the given multisig transaction.
            </summary>
            <param name="transactionId">The identifier of the transaction.</param>
            <param name="address">The address to check the confirmation status of.</param>
            <returns>True if the address has confirmed the transaction in question.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.GetMultisigTransactionAsync(System.Numerics.BigInteger)">
            <summary>
            Gets a transaction out of the transactions mapping on the contract and decodes it.
            </summary>
            <param name="transactionId">The identifier of the transaction to retrieve.</param>
            <returns>A decoded multisig transaction object.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.GetRawMultisigTransactionAsync(System.Numerics.BigInteger)">
            <summary>
            Gets a transaction out of the transactions mapping on the contract without decoding it.
            </summary>
            <param name="transactionId">The identifier of the transaction to retrieve.</param>
            <returns>Raw hex data.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.GetErc20BalanceAsync(System.String)">
            <summary>
            Retrieves the wSTRAX balance associated with an account.
            </summary>
            <param name="addressToQuery">The account to retrieve the ERC20 balance of.</param>
            <returns>The balance of the account.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.EncodeTransferParams(System.String,System.Numerics.BigInteger)">
            <summary>
            Returns the encoded form of transaction data that calls the transfer(address, uint256) method on the WrappedStrax contract.
            This is exactly the contents of the 'data' field in a normal transaction.
            This encoded data is required for submitting a transaction to the multisig contract.
            </summary>
            <param name="address">The address to transfer a quantity of the wSTRAX token to.</param>
            <param name="amount">The amount (in wei) of tokens to be transferred.</param>
            <returns>The hex data of the encoded parameters.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.EncodeMintParams(System.String,System.Numerics.BigInteger)">
            <summary>
            Constructs the data field for a transaction invoking the mint() method of an ERC20 contract that implements it.
            The actual transaction will be sent to the multisig wallet contract as it is the contract that needs to execute the transaction.
            </summary>
            <param name="address">The account that needs tokens to be minted into it (not the address of the multisig contract or the wrapped STRAX contract)</param>
            <param name="amount">The number of tokens to be minted. This is denominated in wei.</param>
            <returns>The hex data of the encoded parameters.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.EncodeBurnParams(System.Numerics.BigInteger,System.String)">
            <summary>
            Constructs the data field for a transaction invoking the burn() method of an ERC20 contract that implements it.
            The actual transaction will be sent to the multisig wallet contract as it is the contract that needs to execute the transaction.
            </summary>
            <param name="amount">The number of tokens to be minted. This is denominated in wei.</param>
            <param name="straxAddress">The destination address on the STRAX chain that the equivalent value of the burnt funds will be sent to.</param>
            <returns>The hex data of the encoded parameters.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.EncodeAddOwnerParams(System.String)">
            <summary>
            Constructs the data field for a transaction invoking the addOwner() method of the multisig wallet contract.
            </summary>
            <param name="newOwnerAddress">The account of the new owner to be added to the multisig owners list.</param>
            <returns>The hex data of the encoded parameters.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.EncodeRemoveOwnerParams(System.String)">
            <summary>
            Constructs the data field for a transaction invoking the removeOwner() method of the multisig wallet contract.
            </summary>
            <param name="existingOwnerAddress">The account of the existing owner to be removed from the multisig owners list.</param>
            <returns>The hex data of the encoded parameters.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHClient.EncodeChangeRequirementParams(System.Numerics.BigInteger)">
            <summary>
            Constructs the data field for a transaction invoking the changeRequirement() method of the multisig wallet contract.
            </summary>
            <param name="requirement">The new threshold for confirmations for a multisig transaction to be executed.</param>
            <returns>The hex data of the encoded parameters.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.CreateTransferEventFilterAsync">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.GetTransferEventsForWrappedStraxAsync">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.GetDestinationAddressAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.GetBlockHeightAsync">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.GetBalanceAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.SubmitTransactionAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.ConfirmTransactionAsync(System.Numerics.BigInteger,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.GetMultisigConfirmationCountAsync(System.Numerics.BigInteger)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.GetOwnersAsync">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.GetMultisigTransactionAsync(System.Numerics.BigInteger)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.AddressConfirmedTransactionAsync(System.Numerics.BigInteger,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.GetRawMultisigTransactionAsync(System.Numerics.BigInteger)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.GetConfirmationsAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.GetErc20BalanceAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.EncodeTransferParams(System.String,System.Numerics.BigInteger)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.EncodeMintParams(System.String,System.Numerics.BigInteger)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.EncodeBurnParams(System.Numerics.BigInteger,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.EncodeAddOwnerParams(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.EncodeRemoveOwnerParams(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHClient.EncodeChangeRequirementParams(System.Numerics.BigInteger)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHCompatibleClientProvider.GetClientForChain(Xels.Bitcoin.Features.Wallet.DestinationChain)">
            <summary>Provides client for specified chain type.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHCompatibleClientProvider.GetAllSupportedChains(System.Boolean)">
            <summary>Provides collection of clients for all supported chains.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHCompatibleClientProvider.IsChainSupported(Xels.Bitcoin.Features.Wallet.DestinationChain)">
            <summary>Returns <c>true</c> if specified chain is supported, <c>false</c> otherwise.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.IETHCompatibleClientProvider.IsChainSupportedAndEnabled(Xels.Bitcoin.Features.Wallet.DestinationChain)">
            <summary>Returns <c>true</c> if specified chain is supported and interop is enabled, <c>false</c> otherwise.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHCompatibleClientProvider.GetClientForChain(Xels.Bitcoin.Features.Wallet.DestinationChain)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHCompatibleClientProvider.GetAllSupportedChains(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHCompatibleClientProvider.IsChainSupported(Xels.Bitcoin.Features.Wallet.DestinationChain)">
            <inheritdoc />
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.ETHCompatibleClientProvider.IsChainSupportedAndEnabled(Xels.Bitcoin.Features.Wallet.DestinationChain)">
            <inheritdoc />
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHClient.TransactionDTO.Destination">
            <summary>
            The destination the multisig transaction will be sent to once it is executed.
            For our implementation this is almost always the wSTRAX ERC20 contract.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHClient.TransactionDTO.Value">
            <summary>
            Often zero for contract calls involving the multisig wallet contract.
            This does not contain the actual amount of wSTRAX being transacted, that is encoded inside the data field.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHClient.TransactionDTO.Data">
            <summary>
            The ABI-encoded data of the multisig transaction.
            Typically this begins with the identifier of the contract call to be executed (e.g. transfer()), followed by zero or more parameters.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHClient.TransactionDTO.Executed">
            <summary>
            Indicates whether the multisig transaction has reached its confirmation threshold and thus been executed.
            The actual execution typically appears as an internal transaction within a confirmTransaction() contract call.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHClient.MultisigTransactionIdentifiers.TransactionHash">
            <summary>
            The hash of the Ethereum transaction containing the multisig contract call.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHClient.MultisigTransactionIdentifiers.TransactionId">
            <summary>
            The related multisig contract transaction ID.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHClient.TransactionsFunction.TransactionId">
            <summary>
            The numeric transaction identifier, i.e. the key of the transactions mapping dictionary.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.MultisigWallet.DeployContractAsync(Nethereum.Web3.Web3,System.String[],System.UInt32)">
            <summary>
            Deploys a new instance of the multisig wallet contract.
            </summary>
            <param name="web3">The web3 interface instance to use.</param>
            <param name="owners">An array of owner account strings e.g. 0xaabbccdd...</param>
            <param name="required">The number of confirmations needed for a multisig transaction to be executed.</param>
            <returns>The contract address of the deployed contract.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.MultisigWallet.GetOwnersAsync(Nethereum.Web3.Web3,System.String)">
            <summary>
            Retrieves the current owners of the multisig contract.
            </summary>
            <param name="web3">The web3 interface instance to use.</param>
            <param name="contractAddress">The address of the deployed multisig wallet contract.</param>
            <returns>A list of owner accounts represented as strings.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.MultisigWallet.AddressConfirmedTransactionAsync(Nethereum.Web3.Web3,System.String,System.Numerics.BigInteger,System.String)">
            <summary>
            Checks whether the given transaction identified by the transactionId has been confirmed by the given address.
            </summary>
            <param name="web3">The web3 interface instance to use.</param>
            <param name="contractAddress">The address of the deployed multisig wallet contract.</param>
            <param name="transactionId">The multisig wallet transaction identifier.</param>
            <param name="address">The address to check the transaction's confirmation status with.</param>
            <returns>An object containing the boolean confirmation state.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.MultisigWallet.GetTransactionAsync(Nethereum.Web3.Web3,System.String,System.Numerics.BigInteger)">
            <summary>
            Gets a transaction out of the transactions mapping on the contract and decodes it.
            </summary>
            <param name="web3">The web3 interface instance to use.</param>
            <param name="contractAddress">The address of the deployed multisig wallet contract.</param>
            <param name="transactionId">The multisig wallet transaction identifier.</param>
            <returns>A decoded transaction object.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.MultisigWallet.GetRawTransactionAsync(Nethereum.Web3.Web3,System.String,System.Numerics.BigInteger)">
            <summary>
            Gets a transaction out of the transactions mapping on the contract without decoding it.
            </summary>
            <param name="web3">The web3 interface instance to use.</param>
            <param name="contractAddress">The address of the deployed multisig wallet contract.</param>
            <param name="transactionId">The multisig wallet transaction identifier.</param>
            <returns>The transaction data in hex format. No decoding is applied.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHClient.MultisigWallet.ExecuteTransactionAsync(Nethereum.Web3.Web3,System.String,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Normally the final mandatory confirmation will automatically call the execute.
            This is provided in case it has to be called again due to an error condition.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.EthereumClient.ContractSource.GnosisSafeProxy.ExecTransactionAsync(Nethereum.Web3.Web3,System.String,System.String,System.Numerics.BigInteger,System.String,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Int32,System.Byte[])">
            <summary>
            Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.
            </summary>
            <remarks>Note: The fees are always transferred, even if the user transaction fails.</remarks>
            <param name="web3">Instance of the web3 client to execute the function against.</param>
            <param name="proxyContract">The address of the Gnosis Safe proxy deployment that owns the wrapped STRAX contract.</param>
            <param name="wrappedStraxContract">The address of the wrapped STRAX ERC20 contract.</param>
            <param name="value">The Ether value of the transaction, if applicable. For ERC20 transfers this is 0.</param>
            <param name="data">The ABI-encoded data of the transaction, e.g. if a contract method is being called. For ERC20 transfers this will be set.</param>
            <param name="safeTxGas">Gas that should be used for the Safe transaction.</param>
            <param name="baseGas">Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund).</param>
            <param name="gasPrice">Gas price that should be used for the payment calculation.</param>
            <param name="signatureCount">The number of packed signatures included.</param>
            <param name="signatures">Packed signature data ({bytes32 r}{bytes32 s}{uint8 v}).</param>
            <returns>The transaction hash of the execution transaction.</returns>
        </member>
        <member name="T:Xels.Bitcoin.Features.Interop.Exceptions.InteropException">
            <summary>
            A general exception indicating an error with the interop process.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropBehavior.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropBehavior.AttachCore">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropBehavior.DetachCore">
            <inheritdoc/>
        </member>
        <member name="T:Xels.Bitcoin.Features.Interop.InteropFeature">
            <summary>
            A class containing all the related configuration to add chain interop functionality to the full node.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropFeature.InitializeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropFeature.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.IFullNodeBuilderExtensions.AddInteroperability(Xels.Bitcoin.Builder.IFullNodeBuilder)">
            <summary>
            Adds chain Interoperability to the node.
            </summary>
            <param name="fullNodeBuilder">The full node builder instance.</param>
        </member>
        <member name="F:Xels.Bitcoin.Features.Interop.InteropPoller.DestinationChainReorgWindow">
            <summary>
            We are giving a reorg window of 12 blocks here, so burns right at the tip won't be processed until they have 12 confirmations. 
            </summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.Interop.InteropPoller.DestinationChainSyncToBuffer">
            <summary>
            If the last polled block for a given destination chain is more than this amount of blocks from the chain's tip,
            fast sync it up before the async loop poller takes over.
            </summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.Interop.InteropPoller.ReserveBalanceTarget">
            <summary>1x10^24 wei = 1 000 000 tokens</summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.Interop.InteropPoller.SubmissionConfirmationThreshold">
            <summary>The number of blocks deep a submission transaction needs to be before it should start getting confirmed by the non-originating nodes.</summary>
        </member>
        <member name="F:Xels.Bitcoin.Features.Interop.InteropPoller.repositoryLock">
            <summary>Both the <see cref="F:Xels.Bitcoin.Features.Interop.InteropPoller.conversionLoop"/> and <see cref="F:Xels.Bitcoin.Features.Interop.InteropPoller.conversionBurnLoop"/> need to access the repository, so access to it should be locked to ensure consistency.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropPoller.InitializeAsync">
            <summary>
            Initializes the poller by starting the periodic loops that check for and process the conversion requests.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropPoller.LoadLastPolledBlockAsync">
            <summary>
            Loads the last polled block from the store.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropPoller.EnsureLastPolledBlockIsSyncedWithChainAsync">
            <summary>
            If the last polled block is more than 50 blocks from the chain's tip, 
            then sync it up so that the async loop task can take over from a point closer
            to the tip.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropPoller.CheckInteropNodesAsync">
            <summary>Retrieves the current chain heights of interop enabled chains via the RPC interface.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropPoller.ProcessBurn(System.String,System.String,Xels.Bitcoin.Features.Interop.ETHClient.BurnFunction)">
            <summary>
            Processes burn() contract calls made against the Wrapped Strax contract deployed on a specific chain.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropPoller.ConvertWeiToSatoshi(System.Numerics.BigInteger)">
            <summary>Converting from wei to satoshi will result in a loss of precision past the 8th decimal place.</summary>
            <param name="wei">The number of wei to convert.</param>
            <returns>The equivalent number of satoshi corresponding to the number of wei.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropPoller.ProcessConversionRequestsAsync">
            <summary>
            Iterates through all unprocessed mint requests in the repository.
            If this node is regarded as the designated originator of the multisig transaction, it will submit the transfer transaction data to
            the multisig wallet contract on the Ethereum chain. This data consists of a method call to the transfer() method on the wrapped STRAX contract,
            as well as the intended recipient address and amount of tokens to be transferred.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropPoller.DetermineConversionRequestOriginator(System.Int32,Xels.Bitcoin.Features.PoA.IFederationMember@)">
            <summary>
            Determines the originator of the conversion request. It can either be this node or another multisig member.
            <para>
            Multisig members on CirrusTest can use the -overrideoriginator command line parameter to determine who
            the originator is due to the fact that not all of the multisig members are online.
            </para>
            </summary>
            <param name="blockHeight">The block height of the conversion request.</param>
            <param name="designatedMember">The federation member who is assigned as the originator of this conversion transaction.</param>
            <returns><c>true</c> if this node is selected as the originator.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropPoller.WaitForReplenishmentToBeConfirmedAsync(Xels.Bitcoin.Features.Interop.ETHClient.MultisigTransactionIdentifiers,Xels.Bitcoin.Features.Wallet.DestinationChain,System.String)">
            <summary>
            Wait for the submission to be well-confirmed before initial vote and broadcast.
            </summary>
            <param name="identifiers">The transaction information to check.</param>
            <param name="destinationChain"></param>
            <param name="caller">The caller that is waiting on the submission transaction's confirmation count.</param>
            <returns><c>True if it succeeded</c>, <c>false</c> if the node is stopping.</returns>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.InteropPoller.Dispose">
            <inheritdoc />
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.InteropSettings.OverrideOriginatorEnabled">
            <summary> If this value is set, enable the override originator logic.</summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.InteropSettings.OverrideOriginator">
            <summary> If this value is set, override this node as the originator.</summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHInteropSettings.MultisigWalletQuorum">
            <summary>The amount of nodes that needs to agree on conversion transaction before it is released.</summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHInteropSettings.MultisigWalletAddress">
            <summary>This should be set to the address of the multisig wallet contract deployed on the Ethereum blockchain.</summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHInteropSettings.WrappedStraxContractAddress">
            <summary>This should be set to the address of the Wrapped STRAX ERC-20 contract deployed on the Ethereum blockchain.</summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHInteropSettings.ClientUrl">
            <summary>This is the RPC address of the geth node running on the local machine. It is normally defaulted to http://localhost:8545</summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHInteropSettings.Account">
            <summary>
            Address of the account on your geth node. It is the account that will be used for transaction
            signing and all interactions with the multisig and wrapped STRAX contracts.
            </summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHInteropSettings.Passphrase">
            <summary>Passphrase for the ethereum account.</summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHInteropSettings.GasLimit">
            <summary>The gas limit for Ethereum interoperability transactions.</summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHInteropSettings.GasPrice">
            <summary>The gas price for Ethereum interoperability transactions (denominated in gwei).</summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHInteropSettings.InteropContractCirrusAddress">
            <summary>This is intended for future functionality and should therefore not be provided/set yet.</summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.ETHInteropSettings.InteropContractAddress">
            <summary>This is intended for future functionality and should therefore not be provided/set yet.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.ETHInteropSettings.GetSettingsPrefix">
            <summary>Prefix that determines which chain the setting are for.</summary>
        </member>
        <member name="P:Xels.Bitcoin.Features.Interop.Payloads.ConversionRequestPayload.IsRequesting">
            <summary>
            <c>True</c> if this payload is requesting a proposal from the other node.
            <c>False</c> if it is replying.
            </summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Payloads.ConversionRequestPayload.#ctor">
            <summary>Parameterless constructor needed for deserialization.</summary>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Payloads.ConversionRequestPayload.ReadWriteCore(NBitcoin.BitcoinStream)">
            <inheritdoc/>
        </member>
        <member name="M:Xels.Bitcoin.Features.Interop.Payloads.ConversionRequestPayload.ToString">
            <inheritdoc/>
        </member>
    </members>
</doc>
